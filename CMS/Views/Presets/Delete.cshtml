@model CMS.Models.ViewModels.Preset
@{
    ViewData["Meta"] = new string[3] { "Delete Preset", "MetaKeyword", "MetaDescription" };
    ViewData["Title"] = "Delete Preset";
}
<!DOCTYPE html>

<html>
<head>

    <title>Delete</title>
</head>
<body>
    <p align="center" style="font-size:50px;" >Delete presets</p>
    <h3>Are you sure you want to delete this?</h3>
    <div class="card border-dark mb-3" style="max-width: 18rem;">
        <div class="card-header">Preset</div>
        <div class="card-body">
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.presetName)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.presetName)
                </dd>
                <dt>
                    Theme Name
                </dt>
                <dd>
                    @{
                        var themename = "";
                        try
                        {
                            CMSContext context = new CMSContext();
                            var them = context.Theme.SingleOrDefault(n => n.themeId == Model.themeId);
                            themename = them.themeName;
                        }
                        catch
                        {
                            themename = "Not found!";
                        }
                    }
                    @Html.DisplayFor(modelItem => themename)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.visitId)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.visitId)
                </dd>
                @{
                    List<Box> boxlist = new List<Box>();
                    List<Card> cards = new List<Card>();
                    try
                    {
                        CMSContext context1 = new CMSContext();
                        boxlist = context1.Box.Where(b => b.presetId == Model.presetId).ToList();

                        foreach (Box box in boxlist)
                        {
                            var cardlist = context1.Card.Where(b => b.boxId == box.boxId).ToList();
                            cards.AddRange(cardlist);
                        }

                    }
                    catch { }
                }
                @if (boxlist.Count > 0)
                {
                <dt>
                    Boxes and Cards
                </dt>
                <dd>

                    Have @boxlist.Count boxes and @cards.Count cards.
                </dd>
                }
            </dl>

            <form asp-action="Delete">
                <input type="hidden" asp-for="presetId" />
                <input type="submit" value="Delete" class="btn btn-outline-danger" />
                <a asp-action="Index" class="btn btn-outline-info">Back to List</a>
            </form>
        </div>
    </div>
</body>
</html>
